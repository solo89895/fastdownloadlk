name: Deploy Static Frontend

on:
  push:
    branches: ['main']
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Debug step: Check repository structure
      - name: Debug - List repository contents
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Repository contents:"
          find . -type d -maxdepth 2 | sort

      # Set up Node.js for frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Check for frontend directory and build it
      - name: Build frontend
        run: |
          # Check if frontend directory exists
          if [ ! -d "frontend" ]; then
            echo "Frontend directory not found, creating structure..."
            mkdir -p frontend/src
            # Create basic package.json if it doesn't exist
            if [ ! -f "frontend/package.json" ]; then
              echo '{
                "name": "fastdownloadlk-frontend",
                "version": "1.0.0",
                "scripts": {
                  "build": "mkdir -p dist && cp -r ../public/* dist/ || echo \"No public directory found\""
                }
              }' > frontend/package.json
            fi
          fi
          
          # Check package.json exists and has valid content
          if [ -f "frontend/package.json" ]; then
            cd frontend
            echo "Installing dependencies..."
            npm install --no-fund --no-audit --loglevel=error
            echo "Building frontend..."
            npm run build
          else
            echo "ERROR: Missing or invalid package.json"
            exit 1
          fi
        env:
          VITE_API_URL: "https://fastlk.netlify.app/.netlify/functions/server"

      # Verify frontend build
      - name: Verify frontend build
        run: |
          echo "Checking frontend build output:"
          if [ -d "frontend/dist" ]; then
            echo "Frontend dist directory found:"
            ls -la frontend/dist
          else
            echo "WARNING: frontend/dist directory not found!"
            echo "Looking for alternative build outputs:"
            find . -name "dist" -type d
            # Create a minimal dist directory if needed
            mkdir -p frontend/dist
            echo "<html><body><h1>FastDownloadLK</h1><p>Site is under maintenance. Please check back later.</p></body></html>" > frontend/dist/index.html
          fi
      
      # Create deployment directory (without Jekyll)
      - name: Prepare deployment files
        run: |
          # Create a fresh dist directory in the repository root
          mkdir -p dist_deploy
          
          # Create .nojekyll file to disable Jekyll processing
          touch dist_deploy/.nojekyll
          
          # Create a basic index.html file directly
          echo "Creating a basic index.html template..."
          echo '<!DOCTYPE html>' > dist_deploy/index.html
          echo '<html lang="en">' >> dist_deploy/index.html
          echo '<head>' >> dist_deploy/index.html
          echo '    <meta charset="UTF-8">' >> dist_deploy/index.html
          echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> dist_deploy/index.html
          echo '    <title>FastDownloadLK - YouTube Downloader</title>' >> dist_deploy/index.html
          echo '    <link rel="icon" href="favicon.svg" type="image/svg+xml">' >> dist_deploy/index.html
          echo '    <style>' >> dist_deploy/index.html
          echo '        body { font-family: Arial; max-width: 800px; margin: 0 auto; padding: 20px; text-align: center; }' >> dist_deploy/index.html
          echo '        h1 { color: #0078d7; }' >> dist_deploy/index.html
          echo '        .container { margin-top: 50px; }' >> dist_deploy/index.html
          echo '        input[type="text"] { width: 70%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }' >> dist_deploy/index.html
          echo '        button { background-color: #0078d7; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; }' >> dist_deploy/index.html
          echo '    </style>' >> dist_deploy/index.html
          echo '</head>' >> dist_deploy/index.html
          echo '<body>' >> dist_deploy/index.html
          echo '    <h1>FastDownloadLK</h1>' >> dist_deploy/index.html
          echo '    <p>YouTube Video Downloader</p>' >> dist_deploy/index.html
          echo '    <div class="container">' >> dist_deploy/index.html
          echo '        <div>' >> dist_deploy/index.html
          echo '            <input type="text" id="videoUrl" placeholder="Enter YouTube URL">' >> dist_deploy/index.html
          echo '            <button onclick="window.location.href='\''index.html'\''">Download</button>' >> dist_deploy/index.html
          echo '        </div>' >> dist_deploy/index.html
          echo '        <p>Video downloader application loading...</p>' >> dist_deploy/index.html
          echo '    </div>' >> dist_deploy/index.html
          echo '</body>' >> dist_deploy/index.html
          echo '</html>' >> dist_deploy/index.html
          
          # Try to copy frontend build files
          if [ -d "frontend/dist" ] && [ "$(ls -A frontend/dist)" ]; then
            echo "Copying frontend/dist files to deployment directory..."
            cp -r frontend/dist/* dist_deploy/
            
            # Make sure the favicon.svg exists at the root
            if [ -f "frontend/dist/favicon.svg" ] && [ ! -f "dist_deploy/favicon.svg" ]; then
              echo "Copying favicon.svg to deploy root..."
              cp frontend/dist/favicon.svg dist_deploy/
            elif [ ! -f "dist_deploy/favicon.svg" ]; then
              echo "Creating a basic favicon.svg..."
              echo '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm3.5 8.5l-5 3a.5.5 0 0 1-.75-.4v-6a.5.5 0 0 1 .75-.4l5 3a.5.5 0 0 1 0 .8z" fill="#0078d7"/></svg>' > dist_deploy/favicon.svg
            fi
          # If frontend/dist is empty or doesn't exist, try public directory
          elif [ -d "public" ]; then
            echo "Using public directory as fallback..."
            cp -r public/* dist_deploy/ || echo "Warning: No files in public directory"
            
            # Create basic favicon.svg if not exists
            if [ ! -f "dist_deploy/favicon.svg" ]; then
              echo "Creating a basic favicon.svg..."
              echo '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm3.5 8.5l-5 3a.5.5 0 0 1-.75-.4v-6a.5.5 0 0 1 .75-.4l5 3a.5.5 0 0 1 0 .8z" fill="#0078d7"/></svg>' > dist_deploy/favicon.svg
            fi
          # Last resort: use the basic HTML already created
          else
            echo "No build files found, using basic index.html."
          fi
          
          # Create CNAME file if custom domain is specified
          if [ -n "$GITHUB_PAGES_CUSTOM_DOMAIN" ]; then
            echo "Setting up custom domain: $GITHUB_PAGES_CUSTOM_DOMAIN"
            echo "$GITHUB_PAGES_CUSTOM_DOMAIN" > dist_deploy/CNAME
          fi
          
          # Show the contents of the deployment directory
          echo "Contents of deployment directory:"
          ls -la dist_deploy/

      # Direct git deployment (avoids GitHub Pages API completely)
      - name: Manual git deployment to gh-pages
        run: |
          # Configure git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Create a new orphan branch without any history
          git checkout --orphan gh-pages-temp
          
          # Remove everything from working directory except dist_deploy
          find . -mindepth 1 -maxdepth 1 -not -name dist_deploy -exec rm -rf {} \;
          
          # Copy all files from dist_deploy to current directory
          cp -a dist_deploy/. .
          
          # Create a .nojekyll file
          touch .nojekyll
          
          # Make sure index.html exists
          if [ ! -f "index.html" ]; then
            echo "<html><body><h1>FastDownloadLK</h1><p>Video Download Tool</p><p><a href='https://github.com/solo89895/fastdownloadlk'>GitHub Repository</a></p></body></html>" > index.html
          fi
          
          # Debug - List files in the directory
          echo "Files to be deployed:"
          ls -la
          
          # Add all files to git
          git add -A
          
          # Commit the changes
          git commit -m "Direct deployment to gh-pages [skip ci]" || echo "No changes to commit"
          
          # Force push to gh-pages branch
          git push -f origin gh-pages-temp:gh-pages

          # Go back to main branch
          git checkout main 